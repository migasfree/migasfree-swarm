[
    {
      "filename": "chapter01.rst",
      "description": "Introduces the book 'Fun with migasfree', its GNU license, and the purpose of migasfree as a centralized deployment tool. Covers the book's structure (installation, usage guide, production), target audience (system administrators), and the free software philosophy behind the project. Keywords: deployment manager, AZLinux, GNU FDL, centralized management, free software. Useful for understanding the context and scope of migasfree before diving into technical aspects."
    },
    {
      "filename": "chapter02.rst",
      "description": "Fundamentals of Software Configuration Management (SCM) and its application in Linux environments. Covers the change cycle (corrective/evolutionary), the role of packages as Configuration Items, and compares managers (apt/yum/zypper) and backends (dpkg/rpm). Keywords: package management, version control, system integrity, dependencies, change auditing. Useful for understanding how migasfree implements these principles in centralized administration."
    },
    {
      "filename": "chapter03.rst",
      "description": "Addresses the challenges of managing desktops in organizational environments, focusing on customization and change management using migasfree. Covers: customization strategies (packaging vs. cloning), comparison of system managers (FCAPS), and migasfree's dynamic deployment model. Keywords: configuration management, dynamic repositories, custom packaging, planned deployment, FCAPS. Useful for implementing centralized management systems while maintaining system integrity."
    },
    {
      "filename": "chapter04.rst",
      "description": "Origin, evolution, and technical features of Migasfree, highlighting its focus on automation, security, and adaptability. Useful for understanding its philosophy (zero management) or integrating it with other tools (Docker, PostgreSQL)."
    },
    {
      "filename": "chapter05.rst",
      "description": "Explores the challenges of managing corporate GNU/Linux environments, presenting migasfree's solution for software customization and deployment. Covers: limitations of traditional methods (cloning), comparison with other system managers (Chef, Puppet, Ansible), FCAPS management model, and migasfree's unique approach through custom packaging and dynamic repositories. Keywords: configuration management, planned deployment, dynamic repositories, custom packaging, FCAPS. Useful for implementing centralized management systems while maintaining system integrity through packages."
    },
    {
      "filename": "chapter06.rst",
      "description": "Demonstrates the complete configuration management workflow in migasfree through a practical example of deploying sample files. Covers: creation and modification of DEB packages, uploading to the server, creating scheduled deployments, and change auditing. Keywords: DEB packaging, scheduled deployments, change auditing, version management, migasfree-upload. Useful for understanding the full SCM cycle in migasfree and implementing controlled changes in GNU/Linux environments."
    },
    {
      "filename": "chapter07.rst",
      "description": "Details the process of configuring the migasfree client through custom packaging. Covers: creating DEB packages to configure migasfree-client and migasfree-play, using dpkg-divert to manage configuration files, and deployment methods (manual, APT repositories, cloning). Keywords: DEB packaging, client configuration, migasfree-play, dpkg-divert, automated deployment. Useful for implementing custom migasfree configurations in production environments."
    },
    {
      "filename": "chapter08.rst",
      "description": "Explains advanced configuration of the migasfree system, focusing on its modular architecture. Covers: formulas for dynamic attributes, manual tag categories, attribute sets, fault definitions, custom queries, and project/domain management. Keywords: Python formulas, dynamic attributes, domain management, Django queries, proactive auditing. Useful for customizing migasfree in complex environments with multiple OSes and hierarchical organizational structures."
    },
    {
      "filename": "chapter09.rst",
      "description": "Details migasfree's software release system, covering: creation and management of deployments (internal/external sources), repository configuration, distribution schedules, and installation policies. Keywords: package management, dynamic repositories, scheduled deployments, installation policies, migasfree-upload. Useful for implementing controlled software distribution strategies in corporate environments."
    },
    {
      "filename": "chapter10.rst",
      "description": "Details the client-server synchronization process in migasfree, explaining key commands like migasfree --update and migasfree-play. Covers: full synchronization flow, multi-platform package management, application and device catalog, and change monitoring. Keywords: automatic synchronization, centralized management, migasfree-play, software/hardware inventory, controlled updates. Useful for understanding how clients interact with the server and how end-users manage applications."
    },
    {
      "filename": "chapter11.rst",
      "description": "Details migasfree's centralized auditing system, covering: alert monitoring (errors, faults, synchronizations), hardware/software inventory, change history, and diagnostic tools. Keywords: centralized monitoring, automated inventory, change history, remote diagnostics, incident management. Useful for maintaining stable systems through proactive tracking of events and changes across the equipment fleet."
    },
    {
      "filename": "chapter12.rst",
      "description": "Details the implementation of migasfree in production environments using Docker. Covers: installation via containers, server configuration, update management, package caching (apt-cacher-ng), and client tagging. Keywords: Docker deployment, production configuration, apt-cacher-ng, container updates, migasfree-label. Useful for administrators needing to deploy migasfree in high-availability corporate environments."
    },
    {
      "filename": "chapter13.rst",
      "description": "Explains how to create a custom Linux distribution using migasfree as a centralized manager. Details methods for selecting packages via deployments (included/excluded) and three installation approaches: basic method, generated Live/CD (example with vitalinux), and image cloning (used in AZLinux). Keywords: custom distro, migasfree deployments, image cloning, Live/CD, vitalinux, AZLinux. Useful for administrators needing to create customized distributions with centralized package and configuration management."
    },
    {
      "filename": "chapter14.rst",
      "description": "Compiles solutions to common issues in Migasfree, covering server errors (500, Docker migration), client configuration (invalid signatures, auto-registration), and specific adjustments (time zones, LDAP). Keywords: error 500, Docker migration, GPG signatures, auto-registration, LDAP context, time zone. Useful for resolving critical production issues or integrating with LDAP."
    },
    {
      "filename": "chapter15.rst",
      "description": "Explains how to diagnose issues in migasfree using DEBUG mode (client/server) and log configuration. Covers: enabling DEBUG on the client (migasfree.log) and Django server (settings.py), and LOGGING structure for detailed logging. Keywords: migasfree debug, Django logging, troubleshooting, settings.py. Useful for resolving execution failures or analyzing unexpected behaviors in development environments."
    },
    {
      "filename": "chapter16.rst",
      "description": "Details key server settings in Migasfree, including organizational configuration (MIGASFREE_ORGANIZATION), device auto-registration (MIGASFREE_AUTOREGISTER), status management (MIGASFREE_DEFAULT_COMPUTER_STATUS), and custom external actions (MIGASFREE_EXTERNAL_ACTIONS). Also covers notifications (MIGASFREE_NOTIFY_), hardware inventory (MIGASFREE_HW_PERIOD), and Django settings (DATABASES, EMAIL). Keywords: server configuration, auto-registration, external actions, notifications, PostgreSQL, Django. Useful for customizing server behavior, integrating with external APIs, or troubleshooting UUID/registration issues."
    },
    {
      "filename": "chapter17.rst",
      "description": "Details advanced configuration of the migasfree client via the /etc/migasfree.conf file and environment variables. Covers key parameters like Server, Project, Auto_Update_Packages, proxy settings, and developer options (Debug). Includes practical configuration examples and package management. Keywords: migasfree client configuration, migasfree.conf, MIGASFREE environment variables, package management, proxy cache. Useful for customizing client implementations and resolving configuration issues."
    },
    {
      "filename": "chapter19.rst",
      "description": "Explains the packaging process of the migasfree client for .deb distributions. Details steps from downloading source code to generating the package, including dependency installation (python-stdeb) and troubleshooting unsupported distributions. Keywords: migasfree packaging, create-package, migasfree-client.deb, python-stdeb, dependencies. Useful for administrators needing to create custom client packages or adapt it to non-standard distributions."
    },
    {
      "filename": "chapter20.rst",
      "description": "Explains the packaging process for Python projects (e.g., Django) for apt-based (Debian/Ubuntu) and rpm-based (RHEL/CentOS) distributions. Details specific commands using python-stdeb for .deb and setup.py bdist_rpm for .rpm, including source download and package generation. Keywords: Python packaging, django, stdeb, bdist_rpm, deb/rpm packages. Useful for creating custom Python packages when not available in official repositories."
    }
  ]