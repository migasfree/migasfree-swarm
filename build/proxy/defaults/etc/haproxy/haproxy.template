global
    maxconn 4096
    maxpipes 1024
    log fd@2 local2
    # log 127.0.0.1 local0
    # log 127.0.0.1 local1 notice
    # tune.bufsize 32768  # workaround -> 414 Request-URI Too Large
    tune.ssl.default-dh-param 2048
    ssl-server-verify none

    master-worker

    # https://www.haproxy.com/blog/enabling-cors-in-haproxy
    tune.lua.bool-sample-conversion normal
    lua-load /etc/haproxy/cors.lua

    ssl-default-bind-options no-tls-tickets ssl-min-ver TLSv1.2 ssl-max-ver TLSv1.3
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256

defaults
    log global
    mode http
    option forwardfor
    option httplog
    option dontlognull
    option http-keep-alive
    timeout connect 10s
    timeout client 2m
    timeout server 2m
    timeout tunnel 1h


http-errors myerrors
    # https://github.com/Jonathan-Rosewood/haproxy-custom-errors
    errorfile 502 /etc/haproxy/errors-custom/502.http
    errorfile 503 /etc/haproxy/errors-custom/503.http
    errorfile 401 /etc/haproxy/errors-custom/401.http
    errorfile 403 /etc/haproxy/errors-custom/403.http
    errorfile 404 /etc/haproxy/errors-custom/404.http
    errorfile 429 /etc/haproxy/errors-custom/429.http


userlist users_cluster
{{USERLIST_CLUSTER}}

userlist users_stack
{{USERLIST_STACK}}


listen stats
    # https://www.haproxy.com/blog/haproxy-on-docker-swarm-load-balancing-and-dns-service-discovery#haproxy-configuration
    bind *:8404 ssl crt /mnt/cluster/certificates/{{STACK}}.pem
    acl auth_ok http_auth(users_cluster)
    stats http-request auth unless auth_ok
    mode http
    stats enable
    stats hide-version
    stats uri /stats
    stats refresh 10s
    stats admin if auth_ok


frontend http
    bind *:80

{% if MTLS %}
    bind *:443 ssl crt /mnt/cluster/certificates/{{STACK}}.pem ca-file /mnt/cluster/certificates/ca.crt verify optional ssl-min-ver TLSv1.2 ssl-max-ver TLSv1.3 alpn h2,http/1.1 crl-file /mnt/cluster/certificates/mtls/crl.pem
{% else %}
    bind *:443 ssl crt /mnt/cluster/certificates/{{STACK}}.pem
{% endif %}

    # redirects
    acl status_path path -i /status
    http-request redirect location /services/status code 301 if status_path

    acl network_mng src {{NETWORK_MNG}}

    http-request set-header X-Forwarded-For %[src]

    errorfiles myerrors
    http-response return  status 429  default-errorfiles  if { status 429 }
    http-response return  status 502  default-errorfiles  if { status 502 }
    http-response return  status 503  default-errorfiles  if { status 503 }
    http-response return  status 403  default-errorfiles  if { status 403 }
    http-response return  status 404  default-errorfiles  if { status 404 }

    http-request add-header X-Forwarded-Proto https

    # CORS (for error pages)
#    http-request lua.cors "GET,POST,PUT" "ws://{{FQDN}},http://{{FQDN}},https://{{FQDN}},https://database-{{FQDN}},https://datastore-{{FQDN}},https://datashare-{{FQDN}},https://worker-{{FQDN}},https://portainer-{{FQDN}}" "*"
    http-request lua.cors "GET,POST,PUT,OPTIONS" "http://{{FQDN}},https://{{FQDN}},https://database-{{FQDN}},https://datastore-{{FQDN}},https://datashare-{{FQDN}},https://worker-{{FQDN}},https://portainer-{{FQDN}},https://assistant-{{FQDN}},http://localhost:*" "*"
    http-response lua.cors



    # Stats HAProxy
    acl is_stats path_beg /stats


    # ACL Certbot
    acl certbot path_beg /.well-known/acme-challenge/

    mode http
    # acl certificates_check url_beg /.well-known
    # use_backend certificates if certificates_check

    # DDOS
    http-request track-sc0 url32+src table per_ip_and_url_rates
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }

    http-request set-var(txn.path) path  # for services_cache

    # WEBSOCKETS. Routing based on websocket protocol header
    acl hdr_connection_upgrade hdr(Connection) -i upgrade
    acl hdr_upgrade_websocket hdr(Upgrade) -i websocket

    acl url_core path_beg /api/ /rest-auth/ /token-auth-jwt/ /token-auth/ /token-refresh/ /alerts/
    acl url_core_mng path_beg /admin/ /docs/ /markdownx/ /graphql/

    # api v4 COMPATIBILITY
    acl url_core path_beg /get_key_repositories /get_properties /get_computer_info /repository-url-template
    http-request replace-path /admin/server/computer/(.*)/change /computers/results/\1    # migasfree-play 1.x



    # console
    # ========
    acl url_root path /
    acl url_empty path_len 0

    # public
    # ======
    acl url_public path_beg /public/ /static/ /pool/ /repo/  # (/repo = retrocompatibility)


    # services
    # ========

    acl url_services path /status
    acl url_services path /services/crl
    acl url_services_mtls path /services/mtls
    acl url_services path_beg /services
    acl url_services_static path_beg /services-static /favicon.ico

    acl is_GET method GET
    acl is_POST method POST
    acl is_PATCH method PATCH


    # external sources
    # ================
    acl url_src path_beg /src/
    acl url_packages path_end {{ extensions }}

    {% if PORT_HTTPS == 443 %}
        acl is_fqdn hdr(host) -i {{FQDN}}
        acl url_datashare_console hdr(host) -i datashare-{{FQDN}}
        acl url_datastore_console hdr(host) -i datastore-{{FQDN}}
        acl url_database_console hdr(host) -i database-{{FQDN}}
        acl url_worker_console  hdr(host) -i worker-{{FQDN}}
        acl url_assistant hdr(host) -i assistant-{{FQDN}}
        acl url_portainer_console  hdr(host) -i portainer-{{FQDN}}
    {% else %}
        acl is_fqdn hdr_reg(host) -i ^{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_datashare_console hdr_reg(host) -i ^datashare-{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_datastore_console hdr_reg(host) -i ^datastore-{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_database_console hdr_reg(host) -i ^database-{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_worker_console  hdr_reg(host) -i ^worker-{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_assistant hdr_reg(host) -i ^assistant-{{FQDN}}(:{{PORT_HTTPS}})?$
        acl url_portainer_console hdr_reg(host) -i ^portainer-{{FQDN}}(:{{PORT_HTTPS}})?$
    {% endif %}


{% if MTLS %}
    # mTLS certificate
    # ================
    acl client_cert_present ssl_c_used
    acl client_cert_verified ssl_c_verify 0


    # URL without mTLS
    # ----------------
    acl url_no_mTLS_get   path_beg /repo/ # Compatibility client v4
    acl url_no_mTLS_get   path     /api/ # Compatibility client v4

    acl url_no_mTLS_get   path     /services/mtls  # url-client-certificate
    acl url_no_mTLS_post  path     /services/mtls  # make client certificate
    acl url_no_mTLS_get   path     /services/crl   # Certificate Revoke List

    acl url_no_mTLS_get   path_beg /services-static/

    acl url_no_mTLS_get   path_beg /public/ /static/ /pool/ /src/
    acl url_no_mTLS_get   path_beg /get_key_repositories /get_properties /get_computer_info /repository-url-template

    # required for clients
    acl url_no_mTLS_get   path_beg /api/v1/public/
    acl url_no_mTLS_post  path_beg /api/v1/public/
    acl url_no_mTLS_get   path_beg /api/public/
    acl url_no_mTLS_post  path_beg /api/v1/safe/
    acl url_no_mTLS_get   path_beg /rest-auth/
    acl url_no_mTLS_get   path_beg /token-auth-jwt/
    acl url_no_mTLS_get   path_beg /token-auth/
    acl url_no_mTLS_get   path_beg /token-refresh/
    acl url_no_mTLS_get   path     /favicon.ico
    acl url_no_mTLS_get   path     /  # Checks if it is active


    # migasfree-play 5.0 -> https://github.com/migasfree/migasfree-play/blob/master/src/config/app.conf.js
    acl url_no_mTLS_get   path_reg ^/api/v1/token/catalog/apps/available/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/catalog/categories/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/computers/[^/]+/label/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/computers/[^/]+/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/computers/[^/]+/devices/$
    acl url_no_mTLS_patch path_reg ^/api/v1/token/computers/[^/]+/devices/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/devices/devices/available/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/devices/devices/[^/]+/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/devices/logical/$
    acl url_no_mTLS_patch path_reg ^/api/v1/token/devices/logical/[^/]+/$
    acl url_no_mTLS_get   path_reg ^/api/v1/token/attributes/$


    # 403 Forbidden for all other endpoints
    # =================================================

    # GET
    http-request deny deny_status 403 if is_GET !url_no_mTLS_get !client_cert_present
    http-request deny deny_status 403 if is_GET !url_no_mTLS_get client_cert_present !client_cert_verified

    # POST
    http-request deny deny_status 403 if is_POST !url_no_mTLS_post !client_cert_present
    http-request deny deny_status 403 if is_POST !url_no_mTLS_post client_cert_present !client_cert_verified

    # PATCH
    http-request deny deny_status 403 if is_PATCH !url_no_mTLS_patch !client_cert_present
    http-request deny deny_status 403 if is_PATCH !url_no_mTLS_patch client_cert_present !client_cert_verified

    # Other methods:
    http-request deny deny_status 403 if !is_GET !is_POST !is_PATCH !client_cert_present
    http-request deny deny_status 403 if !is_GET !is_POST !is_PATCH client_cert_present !client_cert_verified



{% endif %}



    # USE BACKENDS SECTION
    # Warning: The order is important !!!
    # ===================================

{% if certbot %}
    use_backend mf_certbot if certbot
{% endif %}
    use_backend datastore_console if network_mng url_datastore_console
    use_backend database_console if network_mng url_database_console
    use_backend datashare_console if network_mng url_datashare_console
    use_backend worker_console if network_mng url_worker_console
    use_backend assistant if network_mng url_assistant

    use_backend portainer_console if network_mng url_portainer_console
    use_backend mf_console if network_mng url_root or url_empty

    use_backend mf_core if url_core || hdr_connection_upgrade || hdr_upgrade_websocket
    use_backend mf_core if network_mng url_core_mng

    use_backend services if network_mng is_GET url_services || url_services_static
    use_backend services if network_mng url_services_mtls

    use_backend mf_public if url_public || url_packages || url_src

    use_backend stats if is_fqdn is_stats network_mng

    use_backend mf_console if network_mng


{% if certbot %}
backend mf_certbot
    mode http
    balance leastconn
    {% for node in mf_certbot %}
        server {{ node }} {{ node }}:380
    {% endfor %}
{% endif %}

backend mf_public
    mode http
    balance leastconn
    option tcp-check
    {% for node in mf_public %}
        server {{ node }} {{ node }}:80 check port 80 inter 2000 rise 1 fall 1
    {% endfor %}

    server 127.0.0.1 127.0.0.1:8001 backup

backend mf_core
    mode http
    balance leastconn
    # For SWAGGER and REST-FRAMEWORK. It is also necessary "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')" in settings.py
    http-request add-header X-Forwarded-Proto https
    # option forwardfor
    # http-request set-header X-Forwarded-For %[src]
    # sticky-sessions
    #cookie SRVNAME insert secure # https://thisinterestsme.com/haproxy-sticky-sessions/
    #cookie SRVID insert indirect
    cookie SRVNAME insert
    option tcp-check
    {% for node in mf_core %}
        server {{ node }} {{ node }}:8080 check port 8080 inter 2000 rise 1 fall 1
    {% endfor %}


backend mf_console
    mode http
    balance leastconn
    # http-request redirect scheme https unless { ssl_fc }
    # redirect scheme https code 307 if !{ ssl_fc }
    option tcp-check
    {% for node in mf_console %}
        server {{ node }} {{ node }}:80 check port 80 inter 2000 rise 1 fall 1
    {% endfor %}
    server 127.0.0.1 127.0.0.1:8001 backup

#backend s3  # MINIO
#    mode http
#    {% for node in mf_s3_console %}
#        server {{ node }} {{ node }}:9001 check
#    {% endfor %}


backend database_console  # PGADMIN
    mode http
    balance leastconn
    {% for node in mf_database_console %}
        server {{ node }} {{ node }}:5050 check
    {% endfor %}


backend datastore_console  # REDISINSIGHT
    mode http
    balance leastconn
    acl auth_ok http_auth(users_stack)
    http-request auth realm datastore_console_realm if !auth_ok
    {% for node in mf_datastore_console %}
        server {{ node }} {{ node }}:5540 check
    {% endfor %}


backend datashare_console  # migasfree/datashare_console (filebrowser)
    mode http
    balance leastconn
    {% for node in mf_datashare_console %}
        server {{ node }} {{ node }}:80 check
    {% endfor %}


backend portainer_console  # PORTAINER
    mode http
    balance leastconn
    {% for node in mf_portainer_console %}
        server {{ node }} {{ node }}:9000 check
    {% endfor %}


backend worker_console  # Celery Flower
    acl auth_ok http_auth(users_stack)
    http-request auth realm worker_console_realm if !auth_ok
    mode http
    balance leastconn
    {% for node in mf_worker_console %}
        server {{ node }} {{ node }}:5555 check
    {% endfor %}

backend assistant
    #acl auth_ok http_auth(users_stack)
    #http-request auth realm assistant_realm if !auth_ok
    mode http
    balance leastconn
    #http-request set-path %[path,regsub(^/services/assistant/,/)]
    {% for node in mf_assistant %}
        server {{ node }} {{ node }}:8080 check
    {% endfor %}

backend services
    mode http
    acl url_services_cache var(txn.path) -m beg /services-static /favicon.ico
    acl url_status var(txn.path) -m beg /services/status
    balance leastconn
    http-response set-header Cache-Control public,max-age=604800,immutable if url_services_cache || url_status
    server 127.0.0.1 127.0.0.1:8001


backend per_ip_and_url_rates
    stick-table type binary len 8 size 1m expire 10m store http_req_rate(10s)
