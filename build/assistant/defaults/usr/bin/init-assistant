#!/bin/bash

api_request() {
    local METHOD="$1"
    local URL="http://localhost:8080$2"
    local PAYLOAD="$3"
    local TOKEN="$4"

    if [ -z "$TOKEN" ]
    then
        if [[ "$METHOD" == "POST" && -n "$PAYLOAD" ]]
        then
            curl -X "$METHOD" "$URL" \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -d "$PAYLOAD"
        elif [[ "$METHOD" == "GET" ]]
        then
            curl -X "$METHOD" "$URL" \
                -H "accept: application/json"
        fi
    else
        if [[ "$METHOD" == "POST" && -n "$PAYLOAD" ]]
        then
            curl -X "$METHOD" "$URL" \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -d "$PAYLOAD"
        elif [[ "$METHOD" == "GET" ]]
        then
            curl -X "$METHOD" "$URL" \
                -H "accept: application/json" \
                -H "Authorization: Bearer $TOKEN"
        fi
    fi
}

send_message "please wait"
while ! curl -s http://localhost:8080/health > /dev/null;
do
    send_message "please wait"
    sleep 5
done

update-ca-certificates

# Create superadmin
# =================
ADMIN_USER_PASSWORD=$(cat "/run/secrets/${STACK}_superadmin_pass")
_CODE=$(api_request "POST" \
    '/api/v1/auths/signup' \
    '{"email": "'${EMAIL}'", "password": "'${ADMIN_USER_PASSWORD}'", "name": "Admin"}'
)


_TOKEN=$(api_request "POST" \
    '/api/v1/auths/signin' \
    '{"email": "'${EMAIL}'", "password": "'${ADMIN_USER_PASSWORD}'"}' | jq -r '.token'
)

_VERSION=$(
    api_request "GET" \
        '/api/version/updates' \
        '' \
        "$_TOKEN" | jq -r '.current'
)

echo "$_VERSION"

# Initial Config
# ==============

# Gemini connnection
api_request "POST" \
    '/openai/config/update' \
    '{"ENABLE_OPENAI_API":true, "OPENAI_API_BASE_URLS": ["https://generativelanguage.googleapis.com/v1beta/openai"], "OPENAI_API_KEYS": ["'${GOOGLE_API_KEY}'"], "OPENAI_API_CONFIGS": {"0":{"enable":true,"tags":[],"prefix_id":"","model_ids":[],"connection_type":"external"}}}'  \
    "$_TOKEN"

# migasfree mcp-server
api_request "POST" \
    '/api/v1/configs/tool_servers' \
    '{"TOOL_SERVER_CONNECTIONS":[{"url":"http://mcp-server:8080","path":"openapi.json","auth_type":"bearer","key":"","config":{"enable":true,"access_control":{"read":{"group_ids":[],"user_ids":[]},"write":{"group_ids":[],"user_ids":[]}}},"info":{"name":"migasfree-mcp","description":"migasfree-mcp"}}]}'  \
    "$_TOKEN"

# Create GAS
api_request "POST" \
    '/api/v1/models/create' \
    "$(cat /usr/share/migasfree-assistant/gas.json | jq -r '.[0]' )" \
    "$_TOKEN"

# Model default GAS
api_request "POST" \
    '/api/v1/users/user/settings/update' \
    '{"ui":{"version":"'$_VERSION'","models":["gas"]}}'  \
    "$_TOKEN"

send_message ""
reload_proxy
